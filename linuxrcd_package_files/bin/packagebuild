#! /bin/bash
#this script will take one argument, that is the package name to be built
buildpackage=$1

#create a directory for building the selected package in the current dircetory. 
mkdir $buildpackage
#switch into the new directory
cd $buildpackage
#get the source for the package
apt-get source $buildpackage
#get all the build requirements for the package
echo Y | apt-get build-dep $buildpackage


#change into the directory of the source code folder
cd *

#apply the patches that come with the source files TODO DEBIAN QUILT AND OTHER DEBIAN STUFF
dpatch apply-all
gunzip ../*.gz
#patch -p1 < ../*.diff
rm ../*
rm debian/patches/*

#APPLY AND DELETE DEBIAN PATCHES HERE TODO

#Change all references to /usr to /LinuxRCD-Recovery-Tools-And-Data
find . -name "*" |while read FILE
do
#sed -i 's/usr/LinuxRCD-Recovery-Tools-And-Data/g' $FILE  
sed -i 's/\/usr\//USR_FOLDER_NAME_WITH_DUAL_SLASHES/g' $FILE
sed -i 's/\/usr/USR_FOLDER_NAME_WITH_START_SLASH/g' $FILE
sed -i 's/usr\//USR_FOLDER_NAME_WITH_END_SLASH/g' $FILE
sed -i 's/\<usr\>/USR_FOLDER_NAME_ISOLATED/g' $FILE

sed -i 's/USR_FOLDER_NAME_WITH_DUAL_SLASHES/\/LinuxRCD-Recovery-Tools-And-Data\//g' $FILE
sed -i 's/USR_FOLDER_NAME_WITH_START_SLASH/\/LinuxRCD-Recovery-Tools-And-Data/g' $FILE
sed -i 's/USR_FOLDER_NAME_WITH_END_SLASH/LinuxRCD-Recovery-Tools-And-Data\//g' $FILE
sed -i 's/USR_FOLDER_NAME_ISOLATED/LinuxRCD-Recovery-Tools-And-Data/g' $FILE
done

find . -name usr | while read FILEPATH
do
#FILEPATH=$(readlink -f $FILEPATH) 
oldfilepath=$(echo $FILEPATH | rev | cut -f2- -d '/' | rev)
newfilepath=$(echo $oldfilepath |sed 's/usr/LinuxRCD-Recovery-Tools-And-Data/g')
filename=$(echo $FILEPATH | rev | awk -F / '{print $1}' | rev)
mkdir -p $newfilepath/LinuxRCD-Recovery-Tools-And-Data
cp -R $oldfilepath/usr/* $newfilepath/LinuxRCD-Recovery-Tools-And-Data
done

#copy customized files into this source code tree. 
cp -Rv /usr/packageinput/"$buildpackage"/* .

#build the package
yes | debuild -us -uc
buildstatus=$?
#go back one directory into the directory made for the selected package
cd ..
#copy all build debs out of this folder and into the folder that will be be copied before the rest of the chroot environment gets deleted
cp *.deb /usr/packageoutput
cp *.udeb /usr/packageoutput
#go back one directory into the directory this script was started.
cd .. 

#clean up the builddir
rm -rf $buildpackage
#remove the cached downloaded files.
apt-get clean

#Revert to the packages used for building
dpkg --set-selections < /usr/packages_for_building
echo y | apt-get -u dselect-upgrade
if [ $buildstatus -eq 0 ]
then
exit 0
else
exit 1
fi